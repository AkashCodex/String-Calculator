[1mdiff --git a/StringCalculator.java b/StringCalculator.java[m
[1mindex 873010b..e01e7c7 100644[m
[1m--- a/StringCalculator.java[m
[1m+++ b/StringCalculator.java[m
[36m@@ -42,6 +42,29 @@[m [mpublic class StringCalculator[m
     }[m
 [m
 [m
[32m+[m[32m    private int AssignCustomDelimiterAndReturnStartIndexOfNumbers(string numbers)[m
[32m+[m[32m    {[m
[32m+[m[32m        var customDelimiters = GetCustomDelimiter(numbers);[m
[32m+[m[32m        _defaultDelimiters.AddRange(customDelimiters);[m
[32m+[m
[32m+[m[32m        var hasMultipleDelimiters = customDelimiters.Count > 1;[m
[32m+[m[32m        var multipleDelimiterLength = hasMultipleDelimiters ? (customDelimiters.Count * 2) : 0;[m
[32m+[m
[32m+[m[32m        return StartIndexOfNumbersWithCustomDelimiter + customDelimiters.Sum(x => x.Length) + multipleDelimiterLength;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static void ValidateNumbersArePositive(IReadOnlyCollection<int> convertedNumbers)[m
[32m+[m[32m    {[m
[32m+[m[32m        if (!convertedNumbers.Any(x => x < 0)) return;[m
[32m+[m
[32m+[m[32m        var negativeNumbers = string.Join(",", convertedNumbers.Where(x => x < 0).Select(x => x.ToString()).ToArray());[m
[32m+[m[32m        throw new FormatException($"negatives not allowed '{negativeNumbers}'");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
 }  [m
 [m
 [m
